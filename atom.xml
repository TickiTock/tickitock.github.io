<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tick Tock</title>
  
  <subtitle>Logged.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sfclub.cc/"/>
  <updated>2019-12-30T12:35:14.956Z</updated>
  <id>https://www.sfclub.cc/</id>
  
  <author>
    <name>SeizedMeteor903</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不使用Tor的匿名浏览</title>
    <link href="https://www.sfclub.cc/neko/%E4%B8%8D%E4%BD%BF%E7%94%A8Tor%E7%9A%84%E5%8C%BF%E5%90%8D%E6%B5%8F%E8%A7%88/"/>
    <id>https://www.sfclub.cc/neko/不使用Tor的匿名浏览/</id>
    <published>2019-12-23T10:40:00.000Z</published>
    <updated>2019-12-30T12:35:14.956Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>匿名,我将它理解成大多数人不会知道你的真实身份。</p></blockquote><a id="more"></a><p>匿名是状态，达到这个状态你可以有很多的方法<br>例如: 使用Tor Browser浏览网页，这样你就有了在网络上的匿名。  </p><h1 id="代理程序"><a href="#代理程序" class="headerlink" title="代理程序"></a>代理程序</h1><p>Tor,I2P实质上也只是代理。代理在这一环节的作用，主要保障了服务无法通过IP追踪你。代理程序有很多，不仅仅只有这点。例如,一个又快,又安全的代理软件——ShadowSocks</p><h2 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h2><p><a href="https://github.com/shadowsocks/shadowsocks" target="_blank" rel="noopener">ShadowSocks</a>(ss)可以通过数据加密转发帮你突破封锁。<br>Ss不是某某服务商的软件,他是一个程序，需要人来搭建。搭建好SS的服务器本文统称为节点。节点分为这两类:</p><ul><li>公用节点(完全/半公开的)</li><li>私人节点(就自己小范围用的)</li></ul><p>一般来说，私人节点会比公用快很多,但有时候公用的速度也不比私人的差。（硬件，网络好)  </p><ul><li><p>为什么不用ShadowSocksR?</p><p>1.常年没有更新</p><p>2.我认为ss+simple obfs足够了</p></li><li><p>为什么不用ShadowSocksRR?</p><p>这玩意不见得有加什么新的feature..</p></li></ul><p>本文不叙述搭建Shadowsocks的二三事，请自行了解相关内容。</p><h2 id="代理节点的安全性"><a href="#代理节点的安全性" class="headerlink" title="代理节点的安全性"></a>代理节点的安全性</h2><p>用大流量的代理节点。</p><p>如果使用自己搭建的代理节点来匿名访问，那么安全性实际上不是很大。为什么呢？</p><p>网安可以调取各大出口运营商的路由日志，一查就知道什么ip在什么时候连接了什么ip了。即使是在国内使用了中转节点，一样是可以调出来的，只不过步骤多了一步。</p><p>所以，选择代理节点<strong>一定要</strong>选择那些每天用户负载较大的代理节点。</p><h1 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h1><p>假设你通过重重转发连接上了twitter，然后在某某干部发的推留一句<code>我是小明,卢本伟牛逼!</code>，你所有的努力都会白费——进局子蹲着吧。<br>代理程序给予你的只是网络上的匿名而已，其他决定性的细节可帮不了你。  </p><h2 id="身份隔离"><a href="#身份隔离" class="headerlink" title="身份隔离"></a>身份隔离</h2><p>*有的人一直都以为我是XX，但实际上呢？并不是。但是博客的确是其中一个人起的头，然后也有的人来一起写  *   </p><p>(语风同步真的累…)</p><p>就算你用上了代理，但如果你在twitter的名字和你在其他平台的名字都有特征，那也不过是另一个<code>我是小明,卢本伟牛逼</code>罢了。  </p><h2 id="说话风格"><a href="#说话风格" class="headerlink" title="说话风格"></a>说话风格</h2><p>如果说话风格相似也是可以被猜出来的。</p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>不，并不是说看你用什么浏览器而判断你是谁。看的是从你浏览器找出来的特征。<br>举个例子，网站可以通过Cookies判断你是谁，从而绕过你上面的措施。<br>怎么防范呢？那这就要看浏览器了。除了刚刚比较温柔的方法，也有比较暴力的方法——用浏览器的漏洞之类的。所以选择浏览器也是比较重要的一道坎<br>假设你选了XX闭源浏览器，那你也说不定他在什么时候就偷偷些东西上传上去了。但如果你选一款开源的，风险会少的多。只要有一点后门或者漏洞，社区就会很快发现并且修复它(前提是知名度)。如果你问我，什么浏览器好呢？我会说，Mozilla FireFox.</p><h3 id="Moz-a-FireFox"><a href="#Moz-a-FireFox" class="headerlink" title="Moz://a FireFox"></a>Moz://a FireFox</h3><p>Firefox是一款开源浏览器，他们主张保护和不收集用户隐私，例如:</p><ul><li>Firefox在网站询问字体列表时会返回默认的字体列表</li><li>FireFox经常会用上来自Tor-Browser的反跟踪技术</li><li>……  </li></ul><p>以及，FireFox的内核是Rust写的，速度并不比Chrome的C++内核慢。<br>以及，上文提到的，<code>假设你的浏览器有漏洞怎么办</code>，FireFox会比Google更安全，因为语言优势。<br><a href="https://rustlang-cn.org/#why-rust" target="_blank" rel="noopener">Rust的丰富类型系统和所有权模型保证了内存安全性和线程安全性使您能够在编译时消除许多类错误。</a>  </p><h3 id="Chrome就不好吗"><a href="#Chrome就不好吗" class="headerlink" title="Chrome就不好吗?"></a>Chrome就不好吗?</h3><p>Chrome当然是一款优秀的浏览器,但我还是推荐FireFox.</p><p>Chrome本身就是谷歌的产物，光是Chromium就捆绑了大量Google服务的代码在里头，而且用户相对来说比FireFox多。如果有人要研究Chrome和Firefox的漏洞，哪个价值更高呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;匿名,我将它理解成大多数人不会知道你的真实身份。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="knowledge" scheme="https://www.sfclub.cc/categories/knowledge/"/>
    
    
      <category term="network" scheme="https://www.sfclub.cc/tags/network/"/>
    
      <category term="shadowsocks" scheme="https://www.sfclub.cc/tags/shadowsocks/"/>
    
      <category term="anonymous" scheme="https://www.sfclub.cc/tags/anonymous/"/>
    
      <category term="firefox" scheme="https://www.sfclub.cc/tags/firefox/"/>
    
  </entry>
  
  <entry>
    <title>正确使用tags以创造更舒适的体验</title>
    <link href="https://www.sfclub.cc/neko/how_to_use_tags/"/>
    <id>https://www.sfclub.cc/neko/how_to_use_tags/</id>
    <published>2019-12-23T10:35:10.000Z</published>
    <updated>2019-12-29T01:54:18.251Z</updated>
    
    <content type="html"><![CDATA[<p>标签很有意思。如果你用不好你的博客索引会一团屎。这会让用户很少去看你的标签来索引到其他文章：你的博客标签只会是个摆设（大多数情况下）。所以，标签这东西还是值得重视的。</p><p>在我搬到TickiTock前，我曾经试过把标签管理好，那很”烦”。但这给我积攒了足够的经验，以及，只要你能忍受这些繁琐的事情，相信我，标签机制会是个好东西。</p><p>但是在一切开始之前，你应该想想一件事——你需要标签吗？</p><a id="more"></a><h1 id="你真的需要标签吗"><a href="#你真的需要标签吗" class="headerlink" title="你真的需要标签吗?"></a>你真的需要标签吗?</h1><p>如果你需要标签，你首先要确定你用这个标签做些什么。</p><p><img src="https://upload.cc/i1/2019/12/29/9p157N.png" alt="标签_参考图"></p><p>例如，在类似DeviantArt，Twitter的平台上创作的人们只需要关注文章分类章节。</p><h1 id="开始使用标签"><a href="#开始使用标签" class="headerlink" title="开始使用标签"></a>开始使用标签</h1><p>Congratulations.你已经决定要跟着本文来对你的标签们做一些事情了，这是一个好的起点。但正如同人是最大的bug一样，最后结果决定在你的手上。</p><p>若有不适当的内容请在评论区指出。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>首先，新建一个文档，然后把他扔进垃圾桶。新建一个表格，把它放在你写作时最显眼的地方。</p><p><img src="https://upload.cc/i1/2019/12/29/3DoKHC.png" alt></p><h2 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h2><p>这一个大章节主要用于讲解给人用的tags。</p><h3 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h3><p>但在这之前你要确保一个前提：用户可以通过标签在某些页面上面查找到有联系的文章。</p><p>1，打开你的作品们，将关键字一一列举出来，例如我会给<code>is_yum_yummy</code>贴上<code>bukkit</code>,<code>minecraft</code>标签，给<code>bt_torrent_reborn</code>贴上<code>BT</code>,<code>tips</code>标签….这些标签的共同点是，人眼就能看得出来这是干什么的，其次，他们所概括的范围较大。</p><p>例如<code>bt_torrent_reborn</code>的<code>tips</code>标签，可以跟<code>绕过AdFly的强制订阅跳转</code>，<code>-My-Aria2c</code>对应，因为他们同属tips——小技巧。</p><p>除了这种标签之外，还有一种比较特殊的用法。<code>is_yum_yummy</code>的<code>bukkit</code>属于<code>minecraft</code>的子集。这种做法可以使得用户自己调节搜索范围，以及让一个文章同时出现在大或小范围内——要知道，很多情况下你没办法在tag上搞一套继承系统。但如果你的tag支持继承，那么<code>bukkit</code>将会有别的用途。</p><p>接下来，将每个文章的标签都列出来(注意要分文章列)，放到同一个文档里，开始整理。</p><p>步骤如下：</p><ul><li><p>对概念模糊不清的tag做处理</p><p><code>模糊不清</code>是相对于用户而言的，你可以找一个现充好友来帮你干这件事情。但如果连你都无法理解这个标签的意义，建议删除。如果只是概念模糊不清，可以通过改名来处理</p></li><li><p>删减tag</p><p>去掉重复的tag，留下范围广的。去重时要注意分辨什么才是真正重复的，例如<code>bukkit</code>和<code>spigot</code>。除了有一些作品额外强调这两者的区别除外。(注：spigot是bukkit的子集,肉眼可见的是他们都基于同一个插件体系。)</p><p>其次是去掉一次性tag。如果某些tag只在你的文章里出现了一次，把他去掉。你暂时还不需要它们；再或者，把他改个名，让他匹配到更多的文章——但请你注意范围。</p><p>通常建议改名后再度查重。</p></li><li><p>精简</p><p>建议的标签名符合以下标准：</p><ul><li>单个词</li><li>长度较小</li></ul></li></ul><p>完成这些步骤后，将他们整理到你的表格里。</p><p><img src="https://upload.cc/i1/2019/12/29/CybRl9.png" alt="Table_Example"></p><p>接下来，你可以根据这些tags给你的文章标注了。实际效果不会是我的演示图，因为这是临时写来做内容示范的。</p><h3 id="系列项目"><a href="#系列项目" class="headerlink" title="系列项目"></a>系列项目</h3><p>在本文中两者是有不同之处的。</p><p>我是一个在Pixiv的画师，有一个新番出了，我很喜欢，于是我画了很多关于这个番的妹砸。我按照上面的操作标上了标签，但我平时是画风景的，后来人想看我画的妹砸就很难办。那么这个时候，系列项目就登场了。</p><p>简而言之，所谓的<code>系列项目</code>就是某些作品的合集。他和标签/文章分类不同的是(例如<code>Little Story 1</code>，<code>Little Story 2</code>.)强调顺序以及(一般地)自带一个索引点（例如站点顶栏<code>XXX系列</code>）等。</p><p>如果使用<code>文章分类</code>来实现,会有以下可能的缺点:</p><ul><li>缺乏排序性，和其他内容杂糅</li><li>需要额外索引</li></ul><p>需要额外索引是最主要的原因。平台如果支持<code>系列项目</code>一般会直接给你个分类夹页面，但是有些平台/程序直接将将这两个内容融合到了一起（比较常见的做法），不在本章范围内。</p><h2 id="提升SEO"><a href="#提升SEO" class="headerlink" title="提升SEO"></a>提升SEO</h2><p>标签不只是人会看，通常的，搜索引擎也会去看。</p><blockquote><p><a href="https://baike.baidu.com/item/搜索引擎/104812" target="_blank" rel="noopener">搜索引擎</a>基本结构一般包括:搜索器、索引器、检索器、用户接口等四个功能模块。</p><p>1）搜索器，也叫网络蜘蛛，是搜索引擎用来爬行和抓取网页的一个自动程序，在系统后台不停歇地在互联网各个节点爬行，在爬行过程中尽可能快的发现和抓取网页。</p><p>2）索引器。它的主要功能是理解搜索器所采集的网页信息，并从中抽取索引项。</p><p>3）检索器。其功能是快速查找文档，进行文档与查询的相关度评价，对要输出的结果进行排序。</p><p>4）用户接口。它为用户提供可视化的查询输入和结果输出的界面。 [1] </p></blockquote><p>注意: </p><blockquote><p>2）索引器。它的主要功能是理解搜索器所采集的网页信息，并从中抽取索引项。</p></blockquote><p>这就是我们要对付的目标。</p><p>对付索引器，我们可能需要做出一些牺牲，对于用户体验的牺牲。</p><p>为了提高SEO，你的tags可能会变乱不少，这是为了给搜索引擎提取到更多的信息。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>使用标签提升SEO的思路是：加入本文独有的关键字到tags列表里。这一做法和为了用户体验的做法几乎是倒着做的，在这个过程中，你会加入大量的一次性tag——他们无法索引到其他内容去，当用户尝试探索tag时很可能会不断的进入一次性tag。但是有个简单的解决方案：想办法将这两者隔绝开，</p><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>本章的前提是你已经实施了用户体验章节的操作，这两者不能倒过来运行。</p><p>1，提取文章内的独有关键字，可能会跟用户体验关键字有冲突，可以适当取舍。</p><p>2，隔离开那些为了用户体验而创建的关键字，调整找到的关键字。</p><ul><li><p>调整名称</p><p>对于SEO优化而言，你的关键字不应该是大众的——除非你的SEO本来就很棒，你的确有这个需求。例如<code>is_yum_yummy</code>里，我不会选择<code>minecraft</code>,<code>bukkit</code>作为SEO关键字，而是使用<code>yum</code>配合<code>bukkit</code>作为关键字，因为对于精准匹配yum和bukkit的搜索结果并没有那么多，这足够独特了。</p><p>但也别命名的太独特了，建议使用一些搜索引擎索引库内可能有的内容。</p></li><li><p>大小写要统一</p><p>建议全部小写，专有名词除外。</p></li></ul><h3 id="其他因素"><a href="#其他因素" class="headerlink" title="其他因素"></a>其他因素</h3><p>添加tag不一定就能优化你的SEO。这取决于很多因素，本文不在此处一一叙述。</p><p>Q：为什么你说了这么多SEO不见得有多好啊？</p><p>A：因为我懒啊</p><h1 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h1><p><a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;标签很有意思。如果你用不好你的博客索引会一团屎。这会让用户很少去看你的标签来索引到其他文章：你的博客标签只会是个摆设（大多数情况下）。所以，标签这东西还是值得重视的。&lt;/p&gt;
&lt;p&gt;在我搬到TickiTock前，我曾经试过把标签管理好，那很”烦”。但这给我积攒了足够的经验，以及，只要你能忍受这些繁琐的事情，相信我，标签机制会是个好东西。&lt;/p&gt;
&lt;p&gt;但是在一切开始之前，你应该想想一件事——你需要标签吗？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>这个Yum,它香吗?</title>
    <link href="https://www.sfclub.cc/neko/is_yum_yummy/"/>
    <id>https://www.sfclub.cc/neko/is_yum_yummy/</id>
    <published>2019-11-14T20:14:27.000Z</published>
    <updated>2019-12-06T05:45:24.204Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候,我们(至少我)会在一些我的世界服务端整合包里面看到Yum。我觉得，它功能强大，是在制作服务端过程中的好工具，但是总有异样的声音。例如，在一个”noobie”问问题的时候，通常总会有人跳出来说:”删除垃圾Yum即可解决”。像是成了一个梗，起到了偶尔误导不明真相的新手的作用。</p><p>我认为，这个Yum不是香不香的问题，而是真的用好它了吗?</p><a id="more"></a><h1 id="What-is-YUM"><a href="#What-is-YUM" class="headerlink" title="What is YUM"></a>What is YUM</h1><p>Yum 是一个<code>全能的服务器插件管理工具</code>,它可以做到”PlugMan”的所有功能（甚至要更好）。</p><h1 id="为什么Yum会有人黑"><a href="#为什么Yum会有人黑" class="headerlink" title="为什么Yum会有人黑"></a>为什么Yum会有人黑</h1><p>主要是这些功能被人抹黑。</p><h2 id="网络拦截功能"><a href="#网络拦截功能" class="headerlink" title="网络拦截功能"></a>网络拦截功能</h2><p>很多插件都需要连接网络。检查更新，插件验证系统…各种理由,甚至也可能有木马通信。</p><p>而这个功能会把插件对外的通信都拦截下来,因此可能会导致检查更新失败，控制台报错刷屏，插件验证系统失效，无法使用插件…等等。因此一些服主在删除Yum后会发现一些功能能用了，便把问题定位到yum上。是的没错，二分之一是因为Yum默认开启了这个功能，但另外一半则是服主自己不懂得配置。  </p><p>那么所有需要检查更新，验证的插件就必须得让服主关闭这个功能吗？不，不是这样的。Yum在提供这个功能的同时也提供了API,只需要通过API给你的（或者其他的）插件或者通过直接修改配置添加白/黑 名单/域名即可。</p><p>通过API实现白名单的具体代码实现例子:<a href="https://github.com/Bkm016/TabooLib/blob/0bebf1db34b77dcf901322d31c2f6afc0965158b/src/main/scala/io/izzel/taboolib/common/listener/ListenerNetWork.java" target="_blank" rel="noopener">https://github.com/Bkm016/TabooLib/blob/0bebf1db34b77dcf901322d31c2f6afc0965158b/src/main/scala/io/izzel/taboolib/common/listener/ListenerNetWork.java</a></p><h2 id="任务异常监控"><a href="#任务异常监控" class="headerlink" title="任务异常监控"></a>任务异常监控</h2><p><img src="https://upload.cc/i1/2019/12/06/phb7l5.png" alt="TaskMonitor_Example"></p><p>如图。这同时是我觉得比较好用的功能之一，因为Yum显示的有一些异常在服务端控制台看不见。但有时候，一些异常在Bukkit的任务调度器里出现，这意味着经常会有这样的信息刷出..</p><p>Yum同时还有<code>能耗监控</code>,不要跟任务监控混淆，他是另一个东西。</p><p>能耗监控只会在插件处理任务时耗时太长时提醒，且只有一行<del>所以比较少人黑</del></p><p>笔者没有找到该功能的开关,所以..<strong>作为一个服主</strong>，尝试使用ConsoleSpamFix吧。</p><h1 id="Is-yum-yummy"><a href="#Is-yum-yummy" class="headerlink" title="Is yum yummy?"></a>Is yum yummy?</h1><p>用的好就Yummy,用不好就….。</p><h2 id="在用Yum之前"><a href="#在用Yum之前" class="headerlink" title="在用Yum之前"></a>在用Yum之前</h2><p>先搞懂你为什么要使用Yum。</p><p>如果你只是为了热重载，那么你可以选择PlugMan，因为你或许用不上Yum其他功能。</p><h2 id="Yum"><a href="#Yum" class="headerlink" title="Yum"></a>Yum</h2><p>如果你是一个纯粹的腐竹，那么你可以:</p><ul><li><p>用Yum来操控插件安装卸载删除</p></li><li><p>从dev.bukkit.org自动下载插件。</p></li><li><p>使用能耗监控得到插件事件处理耗时</p></li><li><p>安装配套的组件来拦截插件设置OP</p></li></ul><p>如果你是一个开发者,Yum同样适合你。它能帮你找出隐藏的Bug，也能迅速预览插件的事件处理能耗。</p><p><img src="https://data.yumc.pw/plugin/yum/lag.png" alt="Yum_LagMonitor"></p><p><img src="https://data.yumc.pw/plugin/yum/event.png" alt></p><p>它也支持查看插件信息</p><p><img src="https://data.yumc.pw/plugin/yum/info.png" alt="Yum_Info"></p><p>你也可以通过在游戏内使用Yum来运行shell/cmd</p><p><img src="https://upload.cc/i1/2019/12/06/yYkbnI.png" alt="yum_f_help"></p><p>看得出来。如果你要让Yum变得Yummy，你应该把权限控制的更紧——即使yum自带了拦截<code>rm -rf</code>命令对关键文件夹的操作。</p><p>Yum本身是Yummy的，但如果你用的不好就Weird了。</p><p>Links: <a href="https://coding.net/u/502647092/p/Yum/git" target="_blank" rel="noopener">Yum</a> <a href="https://www.mcbbs.net/thread-701333-1-1.html" target="_blank" rel="noopener">Yum-MCBBS宣传贴</a></p><p>同步语风: 某人</p><p><del>第一次写博..intro完全不知道要写啥</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多时候,我们(至少我)会在一些我的世界服务端整合包里面看到Yum。我觉得，它功能强大，是在制作服务端过程中的好工具，但是总有异样的声音。例如，在一个”noobie”问问题的时候，通常总会有人跳出来说:”删除垃圾Yum即可解决”。像是成了一个梗，起到了偶尔误导不明真相的新手的作用。&lt;/p&gt;
&lt;p&gt;我认为，这个Yum不是香不香的问题，而是真的用好它了吗?&lt;/p&gt;
    
    </summary>
    
    
      <category term="minecraft" scheme="https://www.sfclub.cc/tags/minecraft/"/>
    
  </entry>
  
  <entry>
    <title>搬迁到GithubPage踩的坑</title>
    <link href="https://www.sfclub.cc/neko/hexo-gitpage-go/"/>
    <id>https://www.sfclub.cc/neko/hexo-gitpage-go/</id>
    <published>2019-10-27T06:16:14.000Z</published>
    <updated>2019-10-27T06:36:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>服务器没打算续费，感觉用GitHub Page完全能满足我的需求了，何必花这个冤枉钱?   </p><p>Github Page走起!</p><a id="more"></a><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>本人踩到的一些坑..(不看官方WIKI的后果)</p><h2 id="Depolyer早就解耦了"><a href="#Depolyer早就解耦了" class="headerlink" title="Depolyer早就解耦了!"></a>Depolyer早就解耦了!</h2><p>把博客搬运上G<del>ay</del> ithub Page的过程貌似蛮简单的.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/TickiTock/tickitock.github.io</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>这样应该就行了8  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br><span class="line">(node:8584) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure><p>？？？  </p><p>这是咋回事,赶快去翻翻<a href="https://hexo.io/docs/one-command-deployment" target="_blank" rel="noopener">官方文档  </a></p><p><img src="https://i.loli.net/2019/10/27/H6K4E12wPFdusOt.png" alt="Snipaste_2019-10-26_16-37-41.png"></p><p>原来是解耦了…那就跑一遍<code>npm install hexo-depolyer-git --save</code>呗  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-depolyer-git --save</span><br><span class="line">npm ERR! code E404</span><br><span class="line">npm ERR! 404 Not Found - GET https://registry.npmjs.org/hexo-depolyer-git - Not found</span><br><span class="line">npm ERR! 404</span><br><span class="line">npm ERR! 404  <span class="string">'hexo-depolyer-git@latest'</span> is not <span class="keyword">in</span> the npm registry.</span><br><span class="line">npm ERR! 404 You should bug the author to publish it (or use the name yourself!)</span><br><span class="line">npm ERR! 404</span><br><span class="line">npm ERR! 404 Note that you can also install from a</span><br><span class="line">npm ERR! 404 tarball, folder, http url, or git url.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     C:\Users\nope\AppData\Roaming\npm-cache\_logs\2019-10-27T03_46_51_358Z-debug.log</span><br></pre></td></tr></table></figure><p>怎么会没有呢?那干脆直接从github拉好了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm install https://github.com/hexojs/hexo-deployer-git.git --save</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.9: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.1 (node_modules\hexo-deployer-git\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@2.1.1: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-deployer-git@2.0.0</span><br><span class="line">added 21 packages from 20 contributors and audited 12407 packages <span class="keyword">in</span> 59.747s</span><br><span class="line">found 19 vulnerabilities (6 low, 6 moderate, 6 high, 1 critical)</span><br><span class="line">  run `npm audit fix` to fix them, or `npm audit` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><p>行8，那就这样了</p><h2 id="语言全乱了"><a href="#语言全乱了" class="headerlink" title="语言全乱了"></a>语言全乱了</h2><p><img src="https://i.loli.net/2019/10/27/fsOnymvrT6XFRNb.jpg" alt="TIM图片20191027142855.jpg"></p><p>妈耶??  </p><p>这是啥语言…吓得我去看了看_config.yml  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">author:</span> <span class="string">Somebody</span></span><br><span class="line"><span class="attr">language:</span> </span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><p>会不会是language留空的问题?  </p><p>于是我填了个en,刷新之后..还是那样  </p><p>后来运行了一下<code>hexo clean</code>再<code>hexo g</code>就完事了…</p><h2 id="域名自己下了"><a href="#域名自己下了" class="headerlink" title="域名自己下了"></a>域名自己下了</h2><p>跑了几次<code>hexo d</code>之后，群里就有人反馈这个问题了</p><p><img src="https://i.loli.net/2019/10/27/z6J35ykS1pFq8BY.jpg" alt="TIM图片20191027142855.jpg"></p><p>wwwtf??  </p><p>我一看，gitpage没显示我设置了域名  </p><p>于是我去找了找解决方案  </p><ul><li>在source目录下创建了叫CNAME的文件</li><li>在里面写上域名</li></ul><p>然后<code>hexo clean</code>&amp;&amp;<code>hexo g</code>就完事了..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务器没打算续费，感觉用GitHub Page完全能满足我的需求了，何必花这个冤枉钱?   &lt;/p&gt;
&lt;p&gt;Github Page走起!&lt;/p&gt;
    
    </summary>
    
    
      <category term="gitpage,githubpage,hexo" scheme="https://www.sfclub.cc/tags/gitpage-githubpage-hexo/"/>
    
  </entry>
  
  <entry>
    <title>世界上最无聊的网站和最无聊的人</title>
    <link href="https://www.sfclub.cc/neko/%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E6%97%A0%E8%81%8A%E7%9A%84%E7%BD%91%E7%AB%99%E5%92%8C%E6%9C%80%E6%97%A0%E8%81%8A%E7%9A%84%E4%BA%BA/"/>
    <id>https://www.sfclub.cc/neko/世界上最无聊的网站和最无聊的人/</id>
    <published>2019-09-29T12:07:46.000Z</published>
    <updated>2019-09-29T12:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最无聊的人是谁大家心里有数-&gt;_-&gt;</p></blockquote><a id="more"></a><pre><code>[&quot;http://heeeeeeeey.com/&quot;],[&quot;http://tinytuba.com/&quot;],[&quot;http://corndog.io/&quot;],[&quot;http://thatsthefinger.com/&quot;],[&quot;http://cant-not-tweet-this.com/&quot;],[&quot;http://weirdorconfusing.com/&quot;],[&quot;https://www.eyes-only.net/&quot;],[&quot;http://eelslap.com/&quot;],[&quot;http://www.staggeringbeauty.com/&quot;],[&quot;http://burymewithmymoney.com/&quot;],[&quot;http://endless.horse/&quot;],[&quot;http://www.trypap.com/&quot;],[&quot;http://www.republiquedesmangues.fr/&quot;],[&quot;http://www.movenowthinklater.com/&quot;],[&quot;http://www.partridgegetslucky.com/&quot;],[&quot;http://www.rrrgggbbb.com/&quot;],[&quot;http://beesbeesbees.com/&quot;],[&quot;http://www.koalastothemax.com/&quot;],[&quot;http://www.everydayim.com/&quot;],[&quot;http://randomcolour.com/&quot;],[&quot;http://cat-bounce.com/&quot;],[&quot;http://chrismckenzie.com/&quot;],[&quot;http://hasthelargehadroncolliderdestroyedtheworldyet.com/&quot;],[&quot;http://ninjaflex.com/&quot;],[&quot;http://ihasabucket.com/&quot;],[&quot;http://corndogoncorndog.com/&quot;],[&quot;http://www.hackertyper.com/&quot;],[&quot;https://pointerpointer.com&quot;],[&quot;http://imaninja.com/&quot;],[&quot;http://www.ismycomputeron.com/&quot;],[&quot;http://www.nullingthevoid.com/&quot;],[&quot;http://www.muchbetterthanthis.com/&quot;],[&quot;http://www.yesnoif.com/&quot;],[&quot;http://iamawesome.com/&quot;],[&quot;http://www.pleaselike.com/&quot;],[&quot;http://crouton.net/&quot;],[&quot;http://corgiorgy.com/&quot;],[&quot;http://www.wutdafuk.com/&quot;],[&quot;http://unicodesnowmanforyou.com/&quot;],[&quot;http://www.crossdivisions.com/&quot;],[&quot;http://tencents.info/&quot;],[&quot;http://www.patience-is-a-virtue.org/&quot;],[&quot;http://whitetrash.nl/&quot;],[&quot;http://www.theendofreason.com/&quot;],[&quot;http://pixelsfighting.com/&quot;],[&quot;http://isitwhite.com/&quot;],[&quot;http://onemillionlols.com/&quot;],[&quot;http://www.omfgdogs.com/&quot;],[&quot;http://oct82.com/&quot;],[&quot;http://chihuahuaspin.com/&quot;],[&quot;http://www.blankwindows.com/&quot;],[&quot;http://dogs.are.the.most.moe/&quot;],[&quot;http://tunnelsnakes.com/&quot;],[&quot;http://www.trashloop.com/&quot;],[&quot;http://www.ascii-middle-finger.com/&quot;],[&quot;http://spaceis.cool/&quot;],[&quot;http://www.donothingfor2minutes.com/&quot;],[&quot;http://buildshruggie.com/&quot;],[&quot;http://buzzybuzz.biz/&quot;],[&quot;http://yeahlemons.com/&quot;],[&quot;http://burnie.com/&quot;],[&quot;http://wowenwilsonquiz.com&quot;],[&quot;https://thepigeon.org/&quot;],[&quot;http://notdayoftheweek.com/&quot;],[&quot;http://www.amialright.com/&quot;],[&quot;http://nooooooooooooooo.com/&quot;]</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最无聊的人是谁大家心里有数-&amp;gt;_-&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>绕过AdFly的强制订阅跳转</title>
    <link href="https://www.sfclub.cc/neko/%E7%BB%95%E8%BF%87AdFly%E7%9A%84%E5%BC%BA%E5%88%B6%E8%AE%A2%E9%98%85%E8%B7%B3%E8%BD%AC/"/>
    <id>https://www.sfclub.cc/neko/绕过AdFly的强制订阅跳转/</id>
    <published>2019-09-18T04:45:00.000Z</published>
    <updated>2019-09-18T05:11:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>AdFly不知道什么时候升级了。<br>加入了一个新的东西，不再是看广告点Skip AD,跳转到<a href="https://www1.ecleneue.com/" target="_blank" rel="noopener">https://www1.ecleneue.com/</a> 或者是其他的站点。接着他会要求你点击浏览器的弹窗允许它给你推送广告。这种做法蛮恶心的，我曾因为订阅了不知道哪来的推送服务导致右下角天天弹广告，干扰游戏和工作。<br>拆开一个跳转页面不难看到几个关键的地方:</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> destination = <span class="built_in">decodeURIComponent</span>(<span class="string">'httpXXX'</span>);</span><br><span class="line">....</span><br><span class="line">tag.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      sdk.onBeforePermissionPrompt(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  &#125;);</span><br><span class="line">      sdk.onPermissionDefault(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        next_domain = next_domain + <span class="string">'&amp;reason=Deny1'</span>;</span><br><span class="line">        setTimeout(redirectUser, <span class="number">3000</span>, next_domain);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      sdk.onPermissionAllowed(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.location.replace(destination);</span><br><span class="line">      &#125;);</span><br><span class="line">      sdk.onPermissionDenied(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        next_domain = next_domain + <span class="string">'&amp;reason=Deny2'</span>;</span><br><span class="line">        setTimeout(redirectUser, <span class="number">3000</span>, next_domain);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      sdk.onAlreadySubscribed(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.location.replace(destination);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(tag);</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure><p>window.location.replace(destination);<br>按下F12把这句放到控制台跑一下就绕过了.等出UserScript会更方便些</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AdFly不知道什么时候升级了。&lt;br&gt;加入了一个新的东西，不再是看广告点Skip AD,跳转到&lt;a href=&quot;https://www1.ecleneue.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www1.ecleneue.com/&lt;/a&gt; 或者是其他的站点。接着他会要求你点击浏览器的弹窗允许它给你推送广告。这种做法蛮恶心的，我曾因为订阅了不知道哪来的推送服务导致右下角天天弹广告，干扰游戏和工作。&lt;br&gt;拆开一个跳转页面不难看到几个关键的地方:&lt;/p&gt;
    
    </summary>
    
      <category term="knowledge" scheme="https://www.sfclub.cc/categories/knowledge/"/>
    
    
      <category term="adfly" scheme="https://www.sfclub.cc/tags/adfly/"/>
    
      <category term="javascript" scheme="https://www.sfclub.cc/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>复活你的BT种子!</title>
    <link href="https://www.sfclub.cc/neko/bt_torrent_reborn/"/>
    <id>https://www.sfclub.cc/neko/bt_torrent_reborn/</id>
    <published>2019-09-07T15:52:00.000Z</published>
    <updated>2019-09-07T17:12:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每次下到死种就很气。心里十分难受以至于我去补种(手动狗头)</p></blockquote><a id="more"></a><h1 id="在补之前"><a href="#在补之前" class="headerlink" title="在补之前.."></a>在补之前..</h1><p>停停停!! 在说补种之前,先来了解一些和BT有关的东西.</p><h2 id="Peer"><a href="#Peer" class="headerlink" title="Peer"></a>Peer</h2><p>节点,在BT中起到提供下载的角色<br>每个使用BT的人都是Peer，类似于一个包含了服务端和客户端的功能的程序<br>Peer的作用主要是提供碎片文件给用户。Peer越多下载的越快，这是因为BT基于的网络结构(P2P),下载的人越多，碎片文件就可以从更多的源下载，增加下载速度。  </p><h2 id="Tracker"><a href="#Tracker" class="headerlink" title="Tracker"></a>Tracker</h2><p>Tracker,追踪器<br>要连接上一个Peer，当然不能靠ZMap穷举全球IP。因此 Tracker提供的服务不是下载，而是帮助你接入BT网络.他会给予你一些信息，其中包括了其他Peer的IP.</p><h2 id="种子里面包含了什么"><a href="#种子里面包含了什么" class="headerlink" title="种子里面包含了什么?"></a>种子里面包含了什么?</h2><p>里面当然不会有Peer的IP，因为Peer的IP是Tracker提供的<br>—&gt; 所以自然是一些Tracker服务器的IP啊<br>除了Tracker的IP之外还不够。我们还需要一样东西，就是数据指纹<br>在种子里,每个碎片的摘要&amp;名字都写在里面，这是为了防止有人恶意攻击BT网络–验证数据是否有效<br>还有一些其他的信息，比如说备用下载地址之类的，不打算讲</p><h1 id="为什么需要补种"><a href="#为什么需要补种" class="headerlink" title="为什么需要补种"></a>为什么需要补种</h1><p>我觉得大部分人看完上面那些东西可能会有一个疑问，就是”既然这样,那么为什么要补种呢？”<br>很简单,因为速度慢。为什么会慢?也很简单，因为内置Tracker给的Peer大部分连接速度很慢，甚至早就失效了。<br>因此，我们需要修改BT种子，往里头加入更多的Tracker服务器，让你连接上的Peer更多~</p><h2 id="常用的Tracker服务器列表"><a href="#常用的Tracker服务器列表" class="headerlink" title="常用的Tracker服务器列表"></a>常用的Tracker服务器列表</h2><p>Tracker也不一定就稳定。建议从一些专门的地方找,例如<br><a href="https://github.com/ngosang/trackerslist" target="_blank" rel="noopener">https://github.com/ngosang/trackerslist</a></p><h2 id="如何进行补种"><a href="#如何进行补种" class="headerlink" title="如何进行补种"></a>如何进行补种</h2><p>大概的思路是：</p><ul><li>用种子编辑器打开种子</li><li>修改Tracker服务器列表  </li></ul><p>然后就好啦！<br>这里使用<br><code>https://github.com/GerryFerdinandus/bittorrent-tracker-editor/releases</code><br>的BT编辑器做例子,GitHub下载慢的可以用我<a href="https://tranzfer.sfclub.cc/trackereditor_win32.zip" target="_blank" rel="noopener">在服务器上缓存的版本</a><br>版本号: Win32 1.33.0.beta.5<br>解压后里面有个add_trackers.txt，里面是一些预设好的Tracker服务器，不管他，用我们从Github/或者其他什么地方获取到的<br>点击左上角File-&gt;Open one torrent file<br><img src="https://i.loli.net/2019/09/08/oX8eiKvHb1Qs2gU.png" alt><br>然后选中我们需要补种的BT文件,打开，把第一个编辑框里面的内容删掉，填充上我们的Tracker服务器列表。(下面会有一些种子里面的tracker服务器,如果种子完全死的可以删了，或者用一些检测工具检测一下)<br><img src="https://i.loli.net/2019/09/08/UAcwZEWRKtL95p1.png" alt></p><ul><li>如果你能连的上newTrackOn,你也可以点击右上<code>Online Check</code>的<code>Check Status Trackers</code>.它会自动帮你填tracker服务器</li></ul><p>最后保存：<br><img src="https://i.loli.net/2019/09/08/jacBfgXiQodCtFk.png" alt><br>结尾会有几个弹窗 按着回车就好。</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>这样就完事了.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每次下到死种就很气。心里十分难受以至于我去补种(手动狗头)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="knowledge" scheme="https://www.sfclub.cc/categories/knowledge/"/>
    
    
      <category term="bt-torrent" scheme="https://www.sfclub.cc/tags/bt-torrent/"/>
    
  </entry>
  
  <entry>
    <title>反 向 优 化</title>
    <link href="https://www.sfclub.cc/neko/%E5%8F%8D-%E5%90%91-%E4%BC%98-%E5%8C%96/"/>
    <id>https://www.sfclub.cc/neko/反-向-优-化/</id>
    <published>2019-08-23T13:37:00.000Z</published>
    <updated>2019-08-23T13:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/08/23/SbKfw6iIlyXPscZ.png" alt="其实我更想让他们删掉自以为是的战斗更新.."><br>转载自 Ghost_chu</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/23/SbKfw6iIlyXPscZ.png&quot; alt=&quot;其实我更想让他们删掉自以为是的战斗更新..&quot;&gt;&lt;br&gt;转载自 Ghost_chu&lt;/p&gt;

      
    
    </summary>
    
      <category term="interestring" scheme="https://www.sfclub.cc/categories/interestring/"/>
    
    
      <category term="minecraft" scheme="https://www.sfclub.cc/tags/minecraft/"/>
    
  </entry>
  
  <entry>
    <title>宝塔&quot;开源&quot;了</title>
    <link href="https://www.sfclub.cc/neko/%E5%AE%9D%E5%A1%94%E5%BC%80%E6%BA%90%E4%BA%86/"/>
    <id>https://www.sfclub.cc/neko/宝塔开源了/</id>
    <published>2019-08-03T07:27:00.000Z</published>
    <updated>2019-08-13T06:40:28.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>readonly的代码<br><img src="https://i.loli.net/2019/08/03/lYODnuQ4Xm23akH.png" alt="readonly的代码"><br>这是怎么导入的?<br><img src="https://i.loli.net/2019/08/03/6NXpf5w7rMteJWu.png" alt="这是怎么导入的?"><br>python哪来的分号?<br><img src="https://i.loli.net/2019/08/03/lewqsTaSUYdmPIZ.png" alt="哪来的分号.png"><br>在？你分号漏了<br><img src="https://i.loli.net/2019/08/03/nh6z7yd2orIwS8p.png" alt="啧.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;readonly的代码&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2019/08/03/lYODnuQ4Xm23akH.png&quot; alt=&quot;readonly的代码&quot;&gt;&lt;br&gt;这是怎么导入的?&lt;br&gt;&lt;img src=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Oh My Aria2c</title>
    <link href="https://www.sfclub.cc/neko/-My-Aria2c/"/>
    <id>https://www.sfclub.cc/neko/-My-Aria2c/</id>
    <published>2019-07-22T12:54:00.000Z</published>
    <updated>2019-11-23T19:46:00.640Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>假设我想下载某个文件，但本地下载速度非常的慢(或者没时间)<br>那么在这时候，我会上去我的服务器手动输入wget xxxxx。<br>是的速度很快，但是这样太<strong>麻烦</strong>了。后来，我了解到了AriaNg，转念一想，这便是我的解决方案。  </p></blockquote><a id="more"></a><p>我认为在了解AriaNg之前,我们应该了解一下什么是Aria2</p><h1 id="高效的下载工具——Aria2"><a href="#高效的下载工具——Aria2" class="headerlink" title="高效的下载工具——Aria2"></a>高效的下载工具——Aria2</h1><p>Aria2,是一个轻量，支持多种协议的下载工具。其命令行程序名称为”aria2c”.它支持 HTTP/HTTPS, FTP, SFTP, BitTorrent 和 Metalink协议。并且Aria2提供了RPC作为接口.<br>它的速度非常的快，甚至可以直逼磁盘写入速度.具体的原理笔者没有了解过(不会C++),但事实就是这样的。<br>通常来说,下载一个文件通常你只需要这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c http://xxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>So Ez!<br>但这样还不够，由于Aria2它自身开放了他的接口，可以使得Aria2成为一个高速的下载服务器一般，我们只需要找<em>一个调用Aria2 RPC的程序</em>就够了</p><h2 id="Aria2c的gui——AriaNg"><a href="#Aria2c的gui——AriaNg" class="headerlink" title="Aria2c的gui——AriaNg"></a>Aria2c的gui——AriaNg</h2><ul><li>并没有说只有AriaNg，也有其他的只不过我拿这个讲。</li></ul><p>Aria2Ng是个静态Web程序,你甚至可以直接拿他到你本机双击打开index.html使用。<br><img src="https://i.loli.net/2019/07/22/5d35b803a46a876450.png" alt="Aria2Ng"><br>现在，让我们开始搭建吧。</p><h1 id="配置Aria2"><a href="#配置Aria2" class="headerlink" title="配置Aria2"></a>配置Aria2</h1><p>跑不掉的。你还是得要配置一下Aria2c,不然你也无法使用RPC<br>** 本文不讲如何安装Aria2,请自行谷歌 **</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">## &apos;#&apos;开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span><br><span class="line">## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##</span><br><span class="line">## 转自Sanya的博客</span><br><span class="line"></span><br><span class="line">## 文件保存相关 ##</span><br><span class="line"></span><br><span class="line"># 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置  *</span><br><span class="line">dir=</span><br><span class="line"># 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span><br><span class="line">#disk-cache=32M</span><br><span class="line"># 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span><br><span class="line"># 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span><br><span class="line"># falloc和trunc则需要文件系统和内核支持</span><br><span class="line"># NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span><br><span class="line">file-allocation=none</span><br><span class="line"># 断点续传</span><br><span class="line">continue=true</span><br><span class="line"></span><br><span class="line">## 下载连接相关 ##</span><br><span class="line"></span><br><span class="line"># 最大同时下载任务数, 运行时可修改, 默认:5</span><br><span class="line">max-concurrent-downloads=1</span><br><span class="line"># 同一服务器连接数, 添加时可指定, 默认:1 </span><br><span class="line">max-connection-per-server=5</span><br><span class="line"># 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span><br><span class="line"># 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span><br><span class="line">min-split-size=10M</span><br><span class="line"># 单个任务最大线程数, 添加时可指定, 默认:5</span><br><span class="line">split=2</span><br><span class="line"># 整体下载速度限制, 运行时可修改, 默认:0</span><br><span class="line">#max-overall-download-limit=0</span><br><span class="line"># 单个任务下载速度限制, 默认:0</span><br><span class="line">#max-download-limit=0</span><br><span class="line"># 整体上传速度限制, 运行时可修改, 默认:0</span><br><span class="line">#max-overall-upload-limit=0</span><br><span class="line"># 单个任务上传速度限制, 默认:0</span><br><span class="line">#max-upload-limit=0</span><br><span class="line"># 禁用IPv6, 默认:false</span><br><span class="line">#disable-ipv6=true</span><br><span class="line"></span><br><span class="line">## 进度保存相关 ##</span><br><span class="line"></span><br><span class="line"># 从会话文件中读取下载任务 </span><br><span class="line">input-file=/etc/aria2/aria2.session</span><br><span class="line"># 在Aria2退出时保存`错误/未完成`的下载任务到会话文件 </span><br><span class="line">save-session=/etc/aria2/aria2.session</span><br><span class="line"># 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span><br><span class="line">#save-session-interval=60</span><br><span class="line"></span><br><span class="line">## RPC相关设置 ##</span><br><span class="line"></span><br><span class="line"># 启用RPC, 默认:false</span><br><span class="line">enable-rpc=true</span><br><span class="line"># 允许所有来源, 默认:false</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line"># 允许非外部访问, 默认:false</span><br><span class="line">rpc-listen-all=true</span><br><span class="line"># 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span><br><span class="line">#event-poll=select</span><br><span class="line"># RPC监听端口, 端口被占用时可以修改, 默认:6800</span><br><span class="line">#rpc-listen-port=6800</span><br><span class="line"># 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项 *</span><br><span class="line">rpc-secret=HereYourKey</span><br><span class="line"># 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span><br><span class="line">#rpc-user=&lt;USER&gt;</span><br><span class="line"># 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span><br><span class="line">#rpc-passwd=&lt;PASSWD&gt;</span><br><span class="line"></span><br><span class="line">## BT/PT下载相关 ##</span><br><span class="line"></span><br><span class="line"># 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true</span><br><span class="line">#follow-torrent=true</span><br><span class="line"># BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span><br><span class="line">listen-port=51413</span><br><span class="line"># 单个种子最大连接数, 默认:55</span><br><span class="line">#bt-max-peers=55</span><br><span class="line"># 打开DHT功能, PT需要禁用, 默认:true</span><br><span class="line">enable-dht=true</span><br><span class="line"># 打开IPv6 DHT功能, PT需要禁用</span><br><span class="line">#enable-dht6=false</span><br><span class="line"># DHT网络监听端口, 默认:6881-6999</span><br><span class="line">#dht-listen-port=6881-6999</span><br><span class="line"># 本地节点查找, PT需要禁用, 默认:false</span><br><span class="line">#bt-enable-lpd=false</span><br><span class="line"># 种子交换, PT需要禁用, 默认:true</span><br><span class="line">#enable-peer-exchange=false</span><br><span class="line"># 每个种子限速, 对少种的PT很有用, 默认:50K</span><br><span class="line">#bt-request-peer-speed-limit=50K</span><br><span class="line"># 客户端伪装, PT需要</span><br><span class="line">peer-id-prefix=-TR2770-</span><br><span class="line">user-agent=Transmission/2.77</span><br><span class="line"># 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0</span><br><span class="line">seed-ratio=0</span><br><span class="line"># 强制保存会话, 话即使任务已经完成, 默认:false</span><br><span class="line"># 较新的版本开启后会在任务完成后依然保留.aria2文件</span><br><span class="line">#force-save=false</span><br><span class="line"># BT校验相关, 默认:true</span><br><span class="line">#bt-hash-check-seed=true</span><br><span class="line"># 继续之前的BT任务时, 无需再次校验, 默认:false</span><br><span class="line">bt-seed-unverified=true</span><br><span class="line"># 保存磁力链接元数据为种子文件(.torrent文件), 默认:false</span><br><span class="line">bt-save-metadata=true</span><br></pre></td></tr></table></figure><p>我在一些描述后面打了星号，分别是rpc-secret和dir。<br>首先来讲一下Dir,,AriaNg他是<em>不</em>支持在页面里面下载的，也就是说你只能通过其他的手段来下载缓存在服务器上头的文件。比方说:  </p><ul><li>rsync</li><li>HTTP(S)</li><li>SFTP</li><li>FTP(s)</li></ul><p>之类的。在本文中，如果你打算用HTTP(S),那么请把这个dir写成到你打算提供缓存下载的<code>网站目录</code>，例如<code>/home/wwwroot/transfer.xx.io/</code><br>接着是rpc-secret.这个不用多讲，就是你Aria2的访问密钥。如果是私人使用请把它设置的复杂一点，如果是公共的随便写也行。到此Aria2的基本配置算是Completed。<br>接下来,把配置保存到<code>/home/.aria2/aria2.conf</code>,输入<code>aria2c -c</code>，你就可以看到Aria2在正常运行。<br><img src="https://i.loli.net/2019/07/22/5d35bed29a91755997.png" alt="Aria在正常运行.png"><br>如果不是这样请尝试检查权限问题或者配置问题。  </p><h2 id="带到河边做成Systemd吧"><a href="#带到河边做成Systemd吧" class="headerlink" title="带到河边做成Systemd吧"></a>带到河边做成Systemd吧</h2><p>虽然加上-D参数或者再配合一下crond也能做到后台运行，但问题是你关不掉，就算关了你也得手动再打一次命令重启就显得很囊肿..而且你还看不到logs<s>貌似-D是没有有价值的logs的</s>  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Aria2</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/aria2c -D -c</span><br><span class="line"><span class="attr">ExecReload</span>=/usr/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>把这上面一大段写进<code>/etc/systemd/system/aria2c.service</code>,接下来使用<code>systemctl daemon-reload &amp;&amp; systemctl enable aria2c --now</code>重载你的systemd管理工具以及设置开机自启动&amp;&amp;启动服务(如果提示不知道什么是now那就是时候更新你的systemctl了。）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start/stop/restart/status/enable/disable aria2c # 管理服务</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/22/5d35be8bdfbd262954.png" alt="Aria2c在正常运行.png"><br>好，现在我们的Aria2部署到此结束！  </p><h1 id="部署AriaNg"><a href="#部署AriaNg" class="headerlink" title="部署AriaNg"></a>部署AriaNg</h1><p>AriaNg部署起来非常简单。你甚至都不需要搭建到服务器上。假设这是公共场景好了趴<br>还记得刚刚你配置Aria2.conf的时候那个<code>dir=xxx</code>吗？我在那里设置的是我的网站目录，<code>/home/wwwroot/transfer.xx.io</code><br>进入这个目录，使用<code>aria2c https://github.com/mayswind/AriaNg/releases/download/1.1.1/AriaNg-1.1.1-AllInOne.zip</code>下载最新的AriaNg(2019/7/22).<br>接着输入<code>unzip ./AriaNg-(这里按下tab)</code>,回车你就可以解压这玩意。接着，使用<code>mv ./AriaNg(按下tab) ./AriaNg  回车。现在AriaNg就部署了90%了  笔者的这个目录站点分别对应transfer.xx.io。以及笔者在这里把目录命名成了</code>XiaoCNiubi<code>,接下来访问</code>transfer.xx.io/XiaoCNiubi<code>就进入了AriaNg.你会发现一直有个加载中，不要管他直奔左边</code>系统设置.AriaNg设置<code>(如果你的浏览器是中文)    点进去之后，你应该能在上面的栏里找到带有</code>localhost的项`,点进去，编辑信息。<br>  <img src="https://i.loli.net/2019/07/22/5d35c41e1c0a552053.png" alt="AriaNg-RPC-CONFIG.png"><br>  like this.<br>配置完成之后，刷新页面。过不了多久你就可以看到右下的Aria2 状态变绿<br>——除非你没有配置好。</p><h1 id="部署完成"><a href="#部署完成" class="headerlink" title="部署完成!"></a>部署完成!</h1><p>主要速度还是看你服务器的速度而定的。举个例子<br>FireFox下载Sublime Text 3:<br><img src="https://i.loli.net/2019/07/22/5d35b3b65c2eb31712.png" alt="FireFox downloading st3 on local PC"><br>接下来是离线下载(速度实在是太快了..我都没来得及反应过来都已经下好了，看控制台日志将就吧)：<br><img src="https://i.loli.net/2019/07/22/5d35c59847f1529556.png" alt="Remote_Fast_Download.png"><br>Aria2Ng:<br><img src="https://i.loli.net/2019/07/22/5d35c5e53cb3793051.png" alt="Snipaste_2019-07-22_22-18-52.png"><br>接下来，我只需要用<code>transfer.xx.io/Sublime Text Build 3207 x64 Setup.exe</code>这个URL就可以下载回来了。(这里其实没把回转下载速度表达出来..)</p><h2 id="额外章节-定时清理"><a href="#额外章节-定时清理" class="headerlink" title="额外章节:定时清理"></a>额外章节:定时清理</h2><p>把这行命令加进crond里头即可:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm `ls path/to/downloads | grep -v ariang的目录名称`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;假设我想下载某个文件，但本地下载速度非常的慢(或者没时间)&lt;br&gt;那么在这时候，我会上去我的服务器手动输入wget xxxxx。&lt;br&gt;是的速度很快，但是这样太&lt;strong&gt;麻烦&lt;/strong&gt;了。后来，我了解到了AriaNg，转念一想，这便是我的解决方案。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="knowledge" scheme="https://www.sfclub.cc/categories/knowledge/"/>
    
    
      <category term="network" scheme="https://www.sfclub.cc/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>What is Google BBR</title>
    <link href="https://www.sfclub.cc/neko/What-is-Google-BBR/"/>
    <id>https://www.sfclub.cc/neko/What-is-Google-BBR/</id>
    <published>2019-07-21T18:26:00.000Z</published>
    <updated>2019-07-22T06:25:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://tech.jandou.com/CentOS7-Google-BBR.html" target="_blank" rel="noopener">本文关于BBR的介绍部分摘自Tech.jandow.com,版权归原作者或者来源机构所有。</a></p></blockquote><a id="more"></a><p> 传统 TCP 拥塞控制算法，基于<code>丢包反馈</code>的协议。</p><p>基于「丢包反馈」的协议是一种 被动式 的拥塞控制机制，其依据网络中的<code>丢包事件</code>来做网络拥塞判断。即便网络中的负载很高时，只要没有产生拥塞丢包，协议就不会主动降低自己的发送速度。</p><p>这种协议可以 <code>最大程度的利用网络剩余带宽，提高吞吐量。</code> 然而，由于基于丢包反馈协议在网络近饱和状态下所表现出来的侵略性，一方面大大提高了网络的带宽利用率；但另一方面，对于基于丢包反馈的拥塞控制协议来说，大大提高网络利用率同时意味着下一次拥塞丢包事件为期不远了，所以这些协议 <code>在提高网络带宽利用率的同时也间接加大了网络的丢包率</code> ，造成整个网络的抖动性加剧。 </p><h1 id="还有谁导致了丢包？"><a href="#还有谁导致了丢包？" class="headerlink" title="还有谁导致了丢包？"></a>还有谁导致了丢包？</h1><p>丢包并不总是拥塞导致，丢包可能原因是多方面，比如：</p><ul><li>全球最牛的防火墙 GFW 的随机丢包策略</li><li>网路中由于多路径衰落（multi-path fading）所造成的信号衰减（signal degradation）</li><li>通道阻塞造成的丢包（packet drop），再者损坏的封包（corrupted packets）被拒绝通过</li><li>有缺陷的网路硬件、网路驱动软件发生故障</li><li>信号的信噪比（SNR）的影响</li></ul><h1 id="Goooogle-BBR的出现"><a href="#Goooogle-BBR的出现" class="headerlink" title="Goooogle BBR的出现"></a>Goooogle BBR的出现</h1><p>我们自然不喜欢 GFW 这种人为的随机丢包策略，当路过 GFW 时，数据被丢包，我们在此时应该 <code>立刻重新发包</code>，增大发送的频率，而不希望降低速度，也就是不希望传统的 TCP 拥塞算法去控制。</p><p>由此，就出现了基于不丢包的拥塞控制算法 <code>CDG</code>， 以 <strong>延迟</strong> 作为判断依据，延迟增大说明拥塞, 数据开始在路由器的缓冲中积累. 降低发送<strong>窗口</strong> 。然而CDG算法与基于丢包的算法不兼容, 只有全球的设备都换上CDG，但这是不可能的，目前市面上的设备不可能一下子都切换到 CDG，因此 Google 就不开心了，Google 的科学家们开发了一种过渡算法来解决这个问题，这个算法的名字就是 <code>BBR（Bottleneck Bandwidth and RTT）</code> ，它是一种全新的 <code>拥塞控制算法</code> ，BBR 同 CDG 一致的思想是不以丢包作为拥塞控制信号，但是和 CDG 不同的是，BBR 能和 cubic 和 reno 共存。</p><p><img src="https://i.loli.net/2019/07/22/5d34a90246d0017120.gif" alt></p><p> 使用BBR前后网络吞吐量对比图 / By Google</p><p>BBR 由 Google 开发，供 Linux 内核的 TCP 协议栈使用，有了 BBR 算法，Linux 服务器可以显著提高吞吐量并减少连接延迟，简单来说 BBR 能加速网络传输速度。此外，部署 BBR 也很容易，因为该算法只需要发送方，而不需要网络或接收方的支持。</p><h1 id="堵塞，和缓解"><a href="#堵塞，和缓解" class="headerlink" title="堵塞，和缓解"></a>堵塞，和缓解</h1><p>在了解这个玩意之前，我们需要了解什么是<code>拥塞</code></p><h2 id="什么是拥塞"><a href="#什么是拥塞" class="headerlink" title="什么是拥塞"></a>什么是拥塞</h2><blockquote><p>拥塞是指到达通信子网中某一部分的分组数量过多，使得该部分网络来不及处理，以致引起这部分乃至整个网络性能下降的现象，严重时甚至会导致网络通信业务陷入停顿，即出现死锁现象。(摘自百度百科)</p></blockquote><p>而Google TCP-BBR的存在就是为了<strong>缓解</strong>拥塞现象的发生。</p><p>吼，现在我们已经知道了为什么要有BBR的存在。那么BBR这个算法他是如何缓解拥塞的呢?</p><h2 id="如何缓解拥塞"><a href="#如何缓解拥塞" class="headerlink" title="如何缓解拥塞"></a>如何缓解拥塞</h2><p> 首先我们要知道，服务器带宽这条水管他是固定的流量限度。至少我觉得不会有算法那么无聊去给你探测服务商自动帮你花钱增大带宽….<br> 丢包，丢包是怎么样的？丢包就是流量太大了，导致这条水管他的某个地方突然喷出来，而这些喷出来的水还能到达目的地吗？显然不能了。<br> 那么这就很好想了，既然流量太大会溢出，那我不如限流?<br> 是的。Google就是这么想的  </p><h2 id="Google-BBR的原理"><a href="#Google-BBR的原理" class="headerlink" title="Google BBR的原理"></a>Google BBR的原理</h2><p>Google BBR实际上基于一个溢水模型，但我认为爆水管这个可以形容的通俗一些。<br>BBR 通过系统发包量预判爆水管现象的发生，控制水管流量。<br>假设，你在A点往B点灌输水流，你一直灌输不考虑水管的容量。按道理来说在传统TCP拥塞算法下会直接爆，但是有了BBR，他会预判爆水管的发生，从而限流限制到服务器的最大发包量。这样一来，既不会爆水管，也能全力发挥水管的作用。</p><h1 id="额外内容-锐速"><a href="#额外内容-锐速" class="headerlink" title="额外内容:锐速"></a>额外内容:锐速</h1><p>锐速(Server Speeder)不是限流的算法。但他是“极端的利他主义”<br>什么意思？<br>锐速会预测丢包，接着他会把这个包重新再发一遍…依笔者的看法来讲，这点并不能更有效缓解丢包。为啥呢？<br>因为你重新发出去的包，可能还会增大其他包的丢失率，而且这个的副作用也蛮大的，就是你的服务器会加速损失流量…烧钱啊<br>以及<em>虽说有人觉得锐速效果挺好，但是会加剧骨干网的负担。造成很多不必要的流量浪费。</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech.jandou.com/CentOS7-Google-BBR.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;本文关于BBR的介绍部分摘自Tech.jandow.com,版权归原作者或者来源机构所有。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="knowledge" scheme="https://www.sfclub.cc/categories/knowledge/"/>
    
    
      <category term="network" scheme="https://www.sfclub.cc/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>关于Minecraft反压测策略</title>
    <link href="https://www.sfclub.cc/neko/%E5%85%B3%E4%BA%8EMinecraft%E5%8F%8D%E5%8E%8B%E6%B5%8B%E7%AD%96%E7%95%A5/"/>
    <id>https://www.sfclub.cc/neko/关于Minecraft反压测策略/</id>
    <published>2019-07-06T11:22:00.000Z</published>
    <updated>2019-07-06T14:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>oof in minecraft!<br>自从2014年开始，出现了一种攻击Minecraft协议的工具，俗称”压测”，虽然长的是”压力测试”的面孔，但实际上并没有任何数据可供参考。<br>当时，很多腐竹都遇到过这玩意，基本上没人跑得掉，直到16-15年才有人开始开发反压测——GreatFireWall<br>但GFW的效果也并不是很理想，依次又出了AntiAttack,AntiFakePlayer,DianAntiBot,AntiAttackRL这些压测，但是他们都有弱点，而且只有AntiAttackRL在持续更新…</p><a id="more"></a><h1 id="现反压测的弱点"><a href="#现反压测的弱点" class="headerlink" title="现反压测的弱点"></a>现反压测的弱点</h1><p>我并没有把gfw加入我的测试清单，所以这里不会有gfw的原理解析，但根据15年的数据来看，gfw的效果微乎其微(已经长期未更新)  </p><ul><li><p>AntiAttack by vlXingze<br>在16年的时候的确是一款非常出名的插件，甚至被bbs加粗高亮了<br>但这个插件只是<em>耍小聪明</em>而已。<br>实际上这款插件，只需要在进入服务器之前刷新一下服务器Motd接着随机玩家ID长度就可以破了。目前也已经有压测内置了破AntiAttack的方法</p></li><li><p>AntiFakePlayer by jiongjionger<br>这个插件坚挺了相当久，可能是jiongjionger在他的招牌上打上”机器学习”的模样。我并没有深入去deobf这个插件他的内部原理，攻破是偶然发现的<br>只需要让同一ID的假人反复加入就能绕过检测，而且这个插件锁死国内IP才可以进入，大概是为了抵御国外的代理。</p></li><li><p>DianAntiBot by 点点永相随<br>他自身就没有进行混淆，一下就能看的出来。<br>内置了一个并发限制和<em>检测玩家是否发了心跳包</em>，只需要把心跳包加入假人即可。或许ServerCrasher都可以干掉这个玩意</p></li><li><p>AntiAttackRL by vlXingze<br>“AntiAttack Reloaded”<br>应该是目前唯一有效的一个简单的反压测插件。原理没有深入探索，但是看一下配置文件就知道了，一大堆Interval,Total5sLimit……….<br>AATRL不打算详细讲(因为我还没过这玩意，实际上AATRL给我的感觉就是阉割掉机器学习的AntiFakePlayer,阈值都在这了）  </p></li></ul><p>总结是，这些反压测，不是长期未更新而产生奇怪的漏洞，就是耍小聪明来防御假人。以及我认为，如果想做到真正抵御假人你就<em>不应该把防御点放在自己的服务器上</em><br>是的，CDN。但不是CloudFlare,我们需要针对MC的奇葩协议做一个玩意</p><h1 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h1><p>首先我们要记住这几个要点:</p><ul><li>不要耍小聪明</li><li>要有健壮性，要可扩展</li><li>反压测的目的<em>不是为了防止服务器崩溃，而是保护玩家正常游戏</em></li></ul><p>接着，我们要分析一下压测的特征:</p><ul><li>压测是通过塞假人，疯狂刷MOTD等方法进行的，而本质上都是在疯狂发包</li><li>压测的假人名称是无规律的</li><li>压测可以影响一段时间内服务器的人数</li></ul><p>可以看到，第二和第三实际上都有一个例外——Motd压测。</p><h3 id="Motd压测"><a href="#Motd压测" class="headerlink" title="Motd压测"></a>Motd压测</h3><p>因此，我们需要干掉Motd压测，这样才可以进行下面的那两步，但在这之前，我们需要分析一下Motd占资源的地方是哪里。<br>Motd包含的信息有:</p><ul><li>图片</li><li>标语</li><li>在线人数</li></ul><p>是的，就这么少。<br>其实也不难看出，Motd到底是大在了哪里——<em>图片</em>,也就是server-icon.png<br>而客户端是有缓存d,也就是说你只需要发<strong>第一次图片</strong>给<strong>新的IP</strong>就行了，当然你也可以定时检测一下后端的图片是否变化再更新客户端的缓存。（可以针对ColorMotd做一个List）<br>其次就是标语和在线人数。在线人数这点没法避免，可以把标语储存在内存中加速读取速度减少IO使用。当然，还有大家都喜欢的并发量限制，只需要针对单IP的并发即可。  </p><h3 id="假人压测"><a href="#假人压测" class="headerlink" title="假人压测"></a>假人压测</h3><p>首先我们来创建一个map,对应的是IP和lvl<br>以及，我们来分析一下假人压测的特征：  </p><ul><li>短时间内玩家数猛增</li><li>IP是代理IP</li><li>玩家iD完全随机</li></ul><p>  掌握了特征，思路就有了.<br>  首先，是第一个</p><ul><li><p>玩家数量检测<br>一个正常的服务器，他的服务器人数每天都是0.<br>有一天，突然在10分钟内进来了八百十个玩家，这几乎是不可能发生的事情，所以我们可以认为这是一场压测。把他Lvl+1</p></li><li><p>玩家ID检测<br>只有小学生才会用乱打的ID。AFP识别iD是用上了机器学习，我不会机器学习所以不在这BB,Lvl+1</p></li><li><p>玩家并发检测<br>哪有玩家一进来就高频发TAB,发心跳包的..<br>Lvl+2</p></li><li><p>IP<br>加进枪毙名单一个个查询，    ICMP吃的加1，真有代理端口的+2</p></li><li><p>心跳包<br>我们的服务器不需要僵尸。</p></li></ul><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>欢迎RSS,留言..<br>关于为什么假人压测的部分这么水..在发之前不小心丢掉了草稿，这一次算是水文章吧:^)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;oof in minecraft!&lt;br&gt;自从2014年开始，出现了一种攻击Minecraft协议的工具，俗称”压测”，虽然长的是”压力测试”的面孔，但实际上并没有任何数据可供参考。&lt;br&gt;当时，很多腐竹都遇到过这玩意，基本上没人跑得掉，直到16-15年才有人开始开发反压测——GreatFireWall&lt;br&gt;但GFW的效果也并不是很理想，依次又出了AntiAttack,AntiFakePlayer,DianAntiBot,AntiAttackRL这些压测，但是他们都有弱点，而且只有AntiAttackRL在持续更新…&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://www.sfclub.cc/categories/idea/"/>
    
    
      <category term="network" scheme="https://www.sfclub.cc/tags/network/"/>
    
      <category term="minecraft" scheme="https://www.sfclub.cc/tags/minecraft/"/>
    
  </entry>
  
</feed>
